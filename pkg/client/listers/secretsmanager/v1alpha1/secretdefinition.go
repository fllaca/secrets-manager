/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tuenti/secrets-manager/pkg/apis/secretsmanager/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretDefinitionLister helps list SecretDefinitions.
type SecretDefinitionLister interface {
	// List lists all SecretDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SecretDefinition, err error)
	// SecretDefinitions returns an object that can list and get SecretDefinitions.
	SecretDefinitions(namespace string) SecretDefinitionNamespaceLister
	SecretDefinitionListerExpansion
}

// secretDefinitionLister implements the SecretDefinitionLister interface.
type secretDefinitionLister struct {
	indexer cache.Indexer
}

// NewSecretDefinitionLister returns a new SecretDefinitionLister.
func NewSecretDefinitionLister(indexer cache.Indexer) SecretDefinitionLister {
	return &secretDefinitionLister{indexer: indexer}
}

// List lists all SecretDefinitions in the indexer.
func (s *secretDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.SecretDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretDefinition))
	})
	return ret, err
}

// SecretDefinitions returns an object that can list and get SecretDefinitions.
func (s *secretDefinitionLister) SecretDefinitions(namespace string) SecretDefinitionNamespaceLister {
	return secretDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretDefinitionNamespaceLister helps list and get SecretDefinitions.
type SecretDefinitionNamespaceLister interface {
	// List lists all SecretDefinitions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SecretDefinition, err error)
	// Get retrieves the SecretDefinition from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SecretDefinition, error)
	SecretDefinitionNamespaceListerExpansion
}

// secretDefinitionNamespaceLister implements the SecretDefinitionNamespaceLister
// interface.
type secretDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretDefinitions in the indexer for a given namespace.
func (s secretDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretDefinition))
	})
	return ret, err
}

// Get retrieves the SecretDefinition from the indexer for a given namespace and name.
func (s secretDefinitionNamespaceLister) Get(name string) (*v1alpha1.SecretDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretdefinition"), name)
	}
	return obj.(*v1alpha1.SecretDefinition), nil
}
